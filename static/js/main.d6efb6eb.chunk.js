(this.webpackJsonpdiplom_react=this.webpackJsonpdiplom_react||[]).push([[0],{20:function(e,t,i){},30:function(e,t,i){"use strict";i.r(t);var o,a=i(1),s=i.n(a),r=i(13),n=i.n(r),l=i(4);i(20);!function(e){e.header="header",e.main="main"}(o||(o={}));var c=i(0),h=function(e){var t=e.menuItem,i=e.variant;return Object(c.jsx)(c.Fragment,{children:Object(c.jsxs)(l.c,{exact:!0,to:t.link,children:[i===o.header?Object(c.jsx)("li",{className:"header-menu__item",children:t.headline}):null,i===o.main?Object(c.jsxs)("div",{className:"main-menu__item",children:[Object(c.jsx)("h3",{className:"main-menu__headline",children:t.headline}),Object(c.jsx)("img",{src:t.src,width:"337",height:"422",className:"main-menu__img"})]}):null]})})},p=function(e){var t=e.menuItems;return Object(a.useEffect)((function(){var e,t;null===(e=document.querySelector(".language"))||void 0===e||e.addEventListener("click",(function(e){var t;null===(t=document.querySelector(".language__menu"))||void 0===t||t.classList.toggle("_active"),console.log()})),null===(t=document.querySelector(".burger"))||void 0===t||t.addEventListener("click",(function(e){var t,i,o;null===(t=document.querySelector(".header-menu"))||void 0===t||t.classList.toggle("cheked"),null===(i=document.querySelector(".burger"))||void 0===i||i.classList.toggle("burger_cheked"),null===(o=document.querySelector("body"))||void 0===o||o.classList.toggle("lock"),console.log()}))}),[]),Object(c.jsxs)("header",{className:"header",children:[Object(c.jsx)(l.b,{to:"/",children:Object(c.jsx)("img",{src:"img/LOGO.png",width:"127",height:"23",className:"logo"})}),Object(c.jsx)("nav",{className:"header-menu",children:Object(c.jsxs)("ul",{className:"header-menu__container",children:[t.map((function(e,t){return Object(c.jsx)(h,{variant:o.header,menuItem:e},t)})),Object(c.jsx)(l.b,{className:"navigation",to:"/map",children:Object(c.jsx)("div",{style:{marginRight:25,cursor:"pointer"},children:"NAVIGATION"})}),Object(c.jsxs)("div",{className:"language",children:["SELECT LANGUAGE",Object(c.jsxs)("ul",{className:"language__menu",children:[Object(c.jsx)("li",{onClick:function(){return localStorage.setItem("lang","en")},className:"language__item","data-google-lang":"en",children:"EN"}),Object(c.jsx)("li",{onClick:function(){return localStorage.setItem("lang","ua")},className:"language__item","data-google-lang":"uk",children:"UA"})]})]})]})}),Object(c.jsx)("div",{className:"burger",children:Object(c.jsx)("span",{})})]})},d=function(e){var t=e.menuItems;return Object(c.jsxs)("main",{className:"main",children:[Object(c.jsxs)("div",{className:"main__header",children:[Object(c.jsx)("h2",{className:"main__headline",children:"getting  started with STM32 "}),Object(c.jsx)("p",{className:"main__text",children:"STM32 is a family of 32-bit microcontroller integrated circuits by STMicroelectronics. The STM32 chips are grouped into related series that are based around the same 32-bit ARM processor core, such as the Cortex-M33F, Cortex-M7F, Cortex-M4F, Cortex-M3, Cortex-M0+, or Cortex-M0."})]}),Object(c.jsx)("nav",{className:"main-menu",children:t.map((function(e,t){return 0!==t?Object(c.jsx)(h,{variant:o.main,menuItem:e},t):null}))})]})},m=i(2),u=function(e){var t=e.section;return Object(c.jsxs)(c.Fragment,{children:[t.gigatitle?Object(c.jsx)("h4",{className:"library__giga",children:t.gigatitle}):null,Object(c.jsxs)("ul",{className:"library-section",children:[Object(c.jsx)("li",{className:"library-section__headline",children:t.sectionTitle}),t.articles.map((function(e,t){return Object(c.jsx)(l.b,{to:"/library/".concat(e.path),children:Object(c.jsxs)("li",{className:"library-section__link",children:[" ",e.articleTitle]})},t)}))]})]})},g=function(){var e=Object(a.useContext)(U).library;return Object(c.jsx)(c.Fragment,{children:Object(c.jsxs)("section",{className:"library",children:[Object(c.jsx)("h2",{children:"LIBRARY"}),Object(c.jsxs)("div",{className:"library__main",children:[Object(c.jsx)("h4",{children:"General Information ABOUT STM32"}),Object(c.jsx)("nav",{className:"library__sections",children:e.map((function(e){return Object(c.jsx)(u,{section:e},e.id)}))})]})]})})},S=function(e){var t,i,o,a,s=e.library,r=Object(m.f)().path,n={articleTitle:"",titleImg:{width:0,height:0,src:"",alt:""},path:"",articleComponents:[]},h="",p="",d=function(e,t){return s[e].articles[t].path},u=function(e,t){var i="Library",o=s[e].sectionTitle,a=s[e].articles[t].articleTitle;return console.log("".concat(i+" -> "+o+" -> "+a)),"".concat(i+" -> "+o+" -> "+a)};return s.map((function(e,t){e.articles.map((function(i,o){i.path===r&&(n=i,h=o!==e.articles.length-1?d(t,o+1):"",p=u(t,o))}))})),Object(c.jsxs)("article",{className:"article",children:[Object(c.jsxs)("nav",{className:"article-nav article-nav_top",children:[Object(c.jsx)(l.b,{to:"/library",children:Object(c.jsx)("div",{className:"article-nav__link",children:"<< BACK TO THE LIBRARY"})}),Object(c.jsx)(l.b,{to:"/library/".concat(h),children:Object(c.jsx)("div",{className:"article-nav__link",children:"NEXT TOPIC >>"})})]}),Object(c.jsx)("div",{className:"article__path",children:p}),Object(c.jsx)("h2",{className:"article__title",children:n.articleTitle}),Object(c.jsxs)("div",{className:"article__main",children:[Object(c.jsx)("img",{className:"article__title-img",src:null===(t=n.titleImg)||void 0===t?void 0:t.src,alt:null===(i=n.titleImg)||void 0===i?void 0:i.alt,width:null===(o=n.titleImg)||void 0===o?void 0:o.width,height:null===(a=n.titleImg)||void 0===a?void 0:a.height}),n.articleComponents.map((function(e,t){var i,o,a,s,r;return Object(c.jsxs)("section",{className:"section",children:[e.title&&Object(c.jsx)("h4",{className:"section__title",children:e.title}),e.subtitle&&Object(c.jsx)("h5",{className:"section__title",children:e.subtitle}),e.img&&Object(c.jsxs)("div",{className:"article__img-block",children:[Object(c.jsx)("div",{className:"article__img-description",children:null===(i=e.img)||void 0===i?void 0:i.description}),Object(c.jsx)("img",{className:"article__img",src:null===(o=e.img)||void 0===o?void 0:o.src,alt:null===(a=e.img)||void 0===a?void 0:a.alt,width:null===(s=e.img)||void 0===s?void 0:s.width,height:null===(r=e.img)||void 0===r?void 0:r.height})]}),e.text&&Object(c.jsx)("p",{className:"section__text",children:e.text}),e.list&&Object(c.jsx)("ul",{className:"section__list",children:e.list.map((function(e,t){return Object(c.jsx)("li",{children:e},t)}))})]},t)}))]}),Object(c.jsxs)("nav",{className:"article-nav article-nav_bottom",children:[Object(c.jsx)(l.b,{to:"/library",children:Object(c.jsx)("div",{className:"article-nav__link",children:"<< BACK TO THE LIBRARY"})}),Object(c.jsx)(l.b,{to:"/library/".concat(h),children:Object(c.jsx)("div",{className:"article-nav__link",children:"NEXT TOPIC >>"})})]})]})},T=function(){return Object(c.jsxs)("div",{className:"library",children:[Object(c.jsx)("h2",{children:"NAVIGATION"}),Object(c.jsxs)("div",{className:"library__main",children:[Object(c.jsx)("p",{children:"When creating the learning platform, special attention was paid to navigation, the main task was to make access to the page with educational information as fast as possible. The construction of the navigation system is based on the rule of three clicks - it assumes that the user should be able to find any information in no more than 3 mouse clicks. According to this rule, the project has the following structuring:"}),Object(c.jsxs)("ul",{className:"ul",children:[Object(c.jsx)("li",{children:"1st level - Main page"}),Object(c.jsx)("li",{children:Object(c.jsxs)("ul",{children:[Object(c.jsx)("li",{children:"2nd level - Thematic section"}),Object(c.jsx)("li",{children:Object(c.jsx)("ul",{children:"3rd level - Thematic page"})})]})})]}),Object(c.jsx)("p",{children:"The hierarchy can be represented schematically as follows picture:"}),Object(c.jsx)("img",{width:1040,height:693,src:"img/pages/map/1.png",alt:""}),Object(c.jsx)("p",{children:"On the main page (Main screen) there is a menu with which you can navigate through the thematic sections of the site and select the language. Pages that contain the main and / or most significant sections for the learning platform are placed in a separate menu below, provided with illustrations."}),Object(c.jsx)("p",{children:'The second level of the hierarchy is the thematic section. The "Library" section contains articles divided into topics, and topics into subtopics, which contain the names of articles and links to them. In the "Tests" section there are tests on all topics.'}),Object(c.jsx)("p",{children:'The third level of the hierarchy is an article with educational information, also The navigation part of the 2nd level page consists of top and bottom navigation panels. When building navigation elements, the principle of duplicating transitions is used, namely, at the top and bottom of the article there is a link to the next article and a link to the "Library", if the article is the last one in topic or subtopic, a link to the next article returns to the "Library", which allows you to provide access to any piece of information in at least two ways. The top navigation bar also contains a full path from the main page to the current page.'}),Object(c.jsx)("p",{children:'The article has a main title, which duplicates the name of the thematic section in the "Library", and is the title of the article, for example HISTORY OF STM32. A heading that characterizes the information stated in the "subsection" of the article, for example "HARDWARE". The subheading is used to logically separate the text, for example "STEP 1". There are also lists with the help of which sequential information is submitted, or an enumeration. Illustrations and tables are signed at the top in bold type, for example Tera Term output. P.S. if it fails, just reload the page'})]})]})},f={articleTitle:"Set the SPWF variables",titleImg:{width:971,height:529,alt:"boards",src:"img/pages/SPWF_variables/commands.png"},path:"SPWF_variables",articleComponents:[{title:"Command syntax",img:{width:402,height:270,alt:"run",src:"img/pages/SPWF_variables/run.png",description:"Run a command - Syntax"}},{img:{width:785,height:240,alt:"response",src:"img/pages/SPWF_variables/response.png",description:"Response - Syntax"}},{subtitle:"Step 1",text:"Get the default configuration dump",list:["Type AT&V"]},{subtitle:"Step 2",text:"Get a variable value",list:["Type AT+S.GCFG=[var name]"]},{img:{width:326,height:707,alt:"terminal",src:"img/pages/SPWF_variables/terminal.png",description:"Tera Term output"}},{subtitle:"Step 3",text:"Set host name\t",list:["Type AT+S.SCFG=ip_hostname,xxxxxxxx"]},{img:{width:328,height:225,alt:"terminal",src:"img/pages/SPWF_variables/output.png",description:"Tera Term output"}},{subtitle:"Step 4",text:"Set IP address, IP default gateway, IP DNS and IP netmask (for static usage) \t",list:["Type AT+S.SCFG=ip_ipaddr,192.168.0.1xx","Type AT+S.SCFG=ip_gw,192.168.0.1","Type AT+S.SCFG=ip_dns,192.168.0.1","Type AT+S.SCFG=ip_netmask,255.255.255.0"]},{img:{width:328,height:225,alt:"terminal",src:"img/pages/SPWF_variables/output.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Save settings on the flash memory (mandatory after a variable change)",list:["Type AT&W"]},{subtitle:"Step 6",text:"Reset the module",list:["Type AT+CFUN=1"]},{img:{width:406,height:209,alt:"terminal",src:"img/pages/SPWF_variables/wifiscan.png",description:"Tera Term output"}},{subtitle:"Change the variable value",list:["AT+S.SCFG=[var name],xxxx","AT&W"]},{subtitle:"Reset the module",text:"Type AT+CFUN=1"},{img:{width:315,height:48,alt:"terminal",src:"img/pages/SPWF_variables/resey.png",description:"Tera Term output"}}]},b={articleTitle:"FOTA update",path:"fota",articleComponents:[{text:"The SPWF01Sx.11 module (with external flash on board) allows performing a Firmware Over-the-air update via a single HTTP GET. The SPWF01S will validate the firmware image it downloads, load it into a staging area, then prompt the user to issue a reset command in order to complete the update."},{text:"The Apache Web Server will be used in this article(Apache Web Server is available at this link: http://archive.apache.org/dist/httpd/binaries/win32/httpd-2.2.25-win32-x86-openssl-0.9.8y.msi)"},{subtitle:"Step 1",text:"Copy the OTA file (i.e. SPWF01S-xxxxxx-yyyyyyyRELEASE-main.ota) in the Apache 2.2 htdocs folder"},{img:{width:402,height:270,alt:"run",src:"img/pages/FOTA/Apache.png",description:"Apache 2.2 htdocs folder"}},{subtitle:"Step 2",text:"The FWUPDATE command allows to perform a Firmware Over-theair update via a single HTTP GET."},{text:"Syntax:",list:["AT+S.FWUPDATE=<hostname>,<path>,<port>"]},{text:"Configuration parameters:",list:["<hostname> Target host. DNS resolvable name or IP address","<path&queryopts> Document path and optional query arguments","<port> Target host port"]},{text:"The module and the Apache Web server must be connected to the same network. In Tera Term:",list:["type AT+S.FWUPDATE=192.168.x.yyy,/SPWF01S-xxxxxx-yyyyyyyRELEASE-main.ota"]},{subtitle:"Step 3",text:"Reset the module to apply the new FW. Restore factory default settings (mandatory).",list:["Type AT+CFUN=1","Type AT&F\t  "]},{img:{width:468,height:273,alt:"output",src:"img/pages/FOTA/output.png",description:"Tera Term output"}}]},w={titleImg:{width:277,height:234,alt:"wifi",src:"img/pages/Access_point_connection/wifi.png"},articleTitle:"Access point connection",path:"Access_point_connection",articleComponents:[{title:"Scan for available networks",text:"The SCAN command performs an immediate scan for available networks. Infrastructure (AP) and IBSS (Ad-Hoc) networks are both reported. Network type, Channel, BSSID, SSID, Signal strength (RSSI), and 802.11 capabilities are all reported.",list:["Type AT+S.SCAN"]},{img:{width:911,height:342,alt:"scanOutput",src:"img/pages/Access_point_connection/scanOutput.png",description:"Tera Term output"}},{title:"Joining a network (WPA Key)",text:"In order to be connected to an available Wifi network, the AP\tparameters setting is needed."},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=ENG-WPA"]},{subtitle:"Step 2",text:"Set the password",list:["Type AT+S.SCFG=wifi_wpa_psk_text,helloworld"]},{subtitle:"Step 3",text:"Set the network privacy mode (0=none, 1=WEP, 2=WPA-Personal (TKIP/AES) or WPA2-Personal (TKIP/AES))",list:["Type AT+S.SSIDTXT=ENG-WPA"]},{subtitle:"Step 4",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,1"]},{img:{width:205,height:169,alt:"output",src:"img/pages/Access_point_connection/output.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:411,height:306,alt:"outputReset",src:"img/pages/Access_point_connection/outputReset.png",description:"Tera Term output"}},{subtitle:"Step 6",text:"Configure the module using the WEP key (4 possible combinations available). Notes: ",list:["\u201cwifi_wep_key_lens\u201d variable values: 05 and 0D","It\u2019s possible to enter any text string into a WEP key box in the AP, in which case it will be converted into a hexadecimal key using the ASCII values of the characters. A maximum of 5 text characters can be entered for 64 bit keys, and a maximum of 13 characters for 128 bit keys. In this case, it needs to manually convert your ASCII password to HEX and\t complete the wifi_wep_keys[0] variable with the HEX value","i.e. AP WEP key: test1;  ASCII to HEX: 74:65:73:74:31;  So, the AT command is: AT+S.SCFG=wifi_wep_keys[0],7465737431  ","Some APs allow user to insert a passphrase and then the AP automatically generates the  hex keys.  In this scenario, user have not to perform the  ASCII to HEX conversion because the AP  already gives it the hex value."]},{img:{width:793,height:384,alt:"sampleTable",src:"img/pages/Access_point_connection/sampleTable.png",description:"Sample table"}}]},x={articleTitle:"Web client mode",titleImg:{width:281,height:214,alt:"1",src:"img/pages/Web_client_mode/1.png"},path:"Web_client_mode",articleComponents:[{title:"HTTP GET",text:"The HTTP GET feature performs a single HTTP request to the specified host and path. The server response is printed on the UART enabled."},{img:{width:1003,height:397,alt:"scheme",src:"img/pages/Web_client_mode/scheme.png",description:"Scheme"}},{text:"Syntax:",list:["AT+S.HTTPGET=<hostname>,<path>[,<port>]"]},{text:"Configuration parameters:",list:["<hostname>: target host. DNS resolvable name or IP address","<path>: document path","<port>: target port"]},{text:"Device A performs an HTTP GET to the Device B",list:["Type AT+S.HTTPGET=192.168.0.1xx,/index.html"]},{img:{width:418,height:397,alt:"httpGet",src:"img/pages/Web_client_mode/httpGet.png",description:"Tera Term output"}},{title:"HTTP POST",text:"The HTTP POST performs a post of the given path to the specified host.\tThe module can be only used as an HTTP POST client."},{img:{width:578,height:172,alt:"scheme",src:"img/pages/Web_client_mode/schemePost.png",description:"Scheme"}},{text:"Syntax:",list:["AT+S.HTTPPOST =<hostname>,<path&queryopts>,<formcontent>[,<port>]"]},{text:"Configuration parameters:",list:["<hostname>: target host. DNS resolvable name or IP address","<path&queryopts>: document path ","<formcontent>: form to be submitted","<port>: target port"]},{text:"The SPWF01S performs an HTTP POST to an HTTP Post Test Server. The HTTP Post Test Server replies as displayed in the Tera Term output if the HTTP\tPOST successfully",list:["Type: at+s.httppost=posttestserver.com,/post.php,name=demo&email=mymail&subject=subj&body=message"]},{img:{width:418,height:397,alt:"outputPost",src:"img/pages/Web_client_mode/outputPost.png",description:"Tera Term output"}},{title:"Push data on serial port",text:"A built-in html page \u201coutput_demo.html\u201d allows to remotely push\tcharacters on the serial port from a remote browser."},{subtitle:"Step 1",text:"Find your IP address",list:["Type AT+S.STS"]},{img:{width:392,height:92,alt:"ip",src:"img/pages/Web_client_mode/ip.png",description:"Tera Term output"}},{subtitle:"Step 2",text:"Associate your computer with the AP"},{subtitle:"Step 3",text:"Open your web browser"},{subtitle:"Step 4",text:"In the address bar, type <module\u2019s IP\tAddress>/output_demo.html",list:["Type\t192.168.0.1xx/output_demo.html"]},{img:{width:392,height:252,alt:"ip",src:"img/pages/Web_client_mode/browser.png",description:"Web browser"}},{subtitle:"Step 5",text:"Enter the text. In order to manage non-ASCII chars, the\tip_use_decoder variable must be\tmodified (refer to the User Manual for\tmore details). Submit."},{img:{width:375,height:188,alt:"enter",src:"img/pages/Web_client_mode/enter.png",description:"Enter the text"}},{text:"The text will be sent to the serial port of the module"},{img:{width:375,height:148,alt:"enter",src:"img/pages/Web_client_mode/port.png",description:" Serial port of the module"}}]},y={articleTitle:"Web server mode - files in RAM",titleImg:{width:293,height:175,alt:"Web_server",src:"img/pages/Web_server/1.png"},path:"Web_server",articleComponents:[{text:"The Web Server feature allows to create, print and delete ASCII files in the RAM memory of the module. "},{img:{width:707,height:232,alt:"bss",src:"img/pages/Web_server/bss.png"}},{title:"List existing files",text:"The FSL command lists type, sizes and name of all the existing files.",list:["Type AT+S.FSL"]},{img:{width:808,height:412,alt:"files",src:"img/pages/Web_server/files.png",description:"Tera Term output"}},{title:"Print a file",text:"The FSP command prints the content\tof an existing file.",list:["Type AT+S.FSP=/index.html "]},{img:{width:417,height:495,alt:"index",src:"img/pages/Web_server/index.png",description:"Tera Term output"}},{title:"Create a file",text:"The FSC command allows to create a file inside the SPWF for delivery by the SPWF HTTP server."},{text:"Syntax:",list:["AT+S.FSC =<fname>,<max_len>[,<http_header>]"]},{text:"Configuration parameters:",list:["< filename >: filename to create","< max_len >: amount of space to allocate for file, max = 4096 bytes ","<http_header>: 0=HTML header automatically added, 1=HTML header not added (as by default)"]},{list:["AT+S.FSC=/wifidemo.html,1965"]},{img:{width:258,height:163,alt:"output",src:"img/pages/Web_server/output.png",description:"Tera Term output"}},{title:"Append to an existing file",text:"The FSA command allows to append blocks of data to an existing file. This command accepts data after the <cr> at the end of the command line.\t"},{text:"Syntax:",list:["AT+S.FSA=/<filename>,<datalen> "]},{text:"Configuration parameters:",list:["< filename >: filename pre-created","< datalen >: number of characters to append to the file "]},{subtitle:"Step 1",list:["Type AT+S.FSA=/wifidemo.html,1965"]},{subtitle:"Step 2",text:"Open wifidemo.txt in the following\tdirectory: Hands_on\tfolder/HTML_demo_page"},{subtitle:"Step 3",text:"Check you have set up CR+LF in the\tTerminal setup (for more information, refer to the slide 48)"},{subtitle:"Step 4",text:"Copy the file content into Tera term (paste with ALT+V or mouse right\tbutton)"},{img:{width:258,height:163,alt:"output",src:"img/pages/Web_server/output.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Open wifidemo.html",list:["Open your Web browser (suggested Google\tChrome for HTML5 test)","In address bar, type <SPWF IP addr>/wifidemo.html. Type 192.168.0.1xx/wifidemo.html  "]},{img:{width:424,height:378,alt:"browser",src:"img/pages/Web_server/browser.png",description:"Web browser"}},{title:"List existing files",text:"Let's list the files",list:["Type AT+S.FSL"]},{img:{width:617,height:436,alt:"list",src:"img/pages/Web_server/list.png",description:"Tera Term output"}},{title:"Delete an existing file",text:"The FSD command allows to delete an existing file by name. Static files may not be deleted.",list:["Type AT+S.FSL"]},{text:"Syntax:",list:["AT+S.FSD=/<filename>"]},{subtitle:"Step 1",text:"Delete an existing file",list:["Type AT+S.FSD=/wifidemo.html"]},{img:{width:617,height:436,alt:"output",src:"img/pages/Web_server/output.png",description:"Tera Term output"}},{subtitle:"Step 2",text:"Re-open wifidemo.html. Open your Web browser. In address bar: <SPWF IP addr>/wifidemo.html. Type 192.168.0.1xx/wifidemo.html",list:["Type AT+S.FSD=/wifidemo.html"]},{img:{width:358,height:188,alt:"notFound",src:"img/pages/Web_server/notFound.png",description:"Web browser"}}]},M={articleTitle:"Web server mode - files in FLASH",titleImg:{width:254,height:172,alt:"Web_server_flash",src:"img/pages/Web_server_flash/1.png"},path:"Web_server_flash",articleComponents:[{text:"The Web Server feature also allows to upload generic files (PDF,HTML, DOC, JPEG and so on) in the EXTERNAL FLASH memory of\tthe module. It needs to follow the below steps:",list:["create an image file (IMG) using the tool provided in the Hands-on package (the IMG contains the files to upload)","Put the image in a generic and accessible Web Server (Apache Web server will be used in the Hands-on as example)","Using the proper AT command, the IMG will be retrieved over-the-air and the\tstatic files will be created in the external flash memory"]},{img:{width:724,height:226,alt:"bss",src:"img/pages/Web_server_flash/bss.png"}},{title:"Create an image file",subtitle:"Step 1",text:"Open the following folder and\textract all the files:\t../hands_on_wifi/filesystem_update"},{subtitle:"Step 2",text:"Put your own files to upload in the\tpages folder (max 512 Kbytes)"},{subtitle:"Step 3",text:"Run gen.bat"},{img:{width:354,height:241,alt:"gen",src:"img/pages/Web_server_flash/gen.png",description:"Path"}},{subtitle:"Step 4",text:"Open the pages folder and copy\toutfile.img in your external Web\tServer (Apache)"},{img:{width:430,height:202,alt:"pages",src:"img/pages/Web_server_flash/pages.png",description:"Pages"}},{subtitle:"Step 4",text:"Copy outfile.img in the Apache 2.2\thtdocs folder (this is the default\troot server directory)"},{img:{width:438,height:272,alt:"apache",src:"img/pages/Web_server_flash/apache.png",description:"Apache"}},{title:"Filesystem update",text:"The HTTPDFSUPDATE command allows to create static files inside the SPWF for delivery by the SPWF HTTP server"},{text:"Syntax:",list:["AT+S.HTTPDFSUPDATE=<hostname>,<path>[,port]"]},{text:"Configuration parameters:",list:["<hostname>: external web server. DNS resolvable name or IP address","<path>: document path","<port>: target host port"]},{subtitle:"Step 1",list:["Type AT+S.HTTPDFSUPDATE=192.168.x.10x,/outfile.img","Type AT+CFUN=1"]},{img:{width:454,height:327,alt:"update",src:"img/pages/Web_server_flash/update.png",description:"Tera Term output"}},{subtitle:"Step 2",text:"Let's list the files",list:["Type AT+S.FSL"]},{img:{width:664,height:400,alt:"list",src:"img/pages/Web_server_flash/list.png",description:"Tera Term output"}},{subtitle:"Step 3",text:"Open index1.html page"},{img:{width:421,height:415,alt:"index",src:"img/pages/Web_server_flash/index.png",description:"Web browser"}},{title:"Filesystem erase",text:"Erase the external httpd filesystem",list:["Type AT+S. HTTPDFSERASE"]},{text:"Let's list the files",list:["Type AT+S.FSL"]},{img:{width:296,height:315,alt:"erase",src:"img/pages/Web_server_flash/erase.png",description:"Tera Term output"}},{title:"Filesystem update",text:"The HTTPDFSWRITE command allows to create static files inside\tthe SPWF via the UART interface. The HW flow control MUST be\tenabled in order to use the command."},{text:"Syntax:",list:["AT+S.HTTPDFSWRITE =<datalen><CR><data>"]},{text:"Configuration parameters:",list:["<datalen>: Amount of bytes to be sent"]},{subtitle:"Step 1",list:["Type AT+S. HTTPDFSWRITE=357957","In Tera Term: File \u2013 Send File...","Reset the module: Type AT+CFUN=1  "]},{img:{width:415,height:385,alt:"send",src:"img/pages/Web_server_flash/send.png",description:"Send File... "}},{img:{width:445,height:502,alt:"sendOutput",src:"img/pages/Web_server_flash/sendOutput.png",description:"Tera Term output"}}]},v={articleTitle:"Socket interface",titleImg:{width:483,height:288,alt:"Socket_interface",src:"img/pages/Socket_interface/1.png"},path:"Socket_interface",articleComponents:[{title:"TCP/UDP/UART socket interface",text:"The Socket interface allows communication via TCP, UDP and UART.\tThe SPWF is both a client and a server socket. In this LAB, will be\tdetailed the socket client feature."},{img:{width:752,height:339,alt:"socket",src:"img/pages/Socket_interface/socket.png"}},{title:"Open TCP/UDP connection",text:"The SOCKON command allows to open a TCP/UDP connection to a specified host (up to 8 socket connections at same time)."},{text:"Syntax:",list:["AT+S.SOCKON=<hostname>,<port>,<protocol>,ind"]},{text:"Configuration parameters:",list:["<hostname>: target host. DNS resolvable name or IP address","<port>: TCP/UDP socket port ","<protocol>: t for TCP socket, u for UDP socket","ind: indicate when data has arrived (optional). Up to 4 (x730 bytes)  consecutive \u201cPending data\u201d message (without any AT+S.SOCKR) are  guaranteed. It is suggested to empty the buffer using the AT+S.SOCKR  command and to avoid exceeding 4 indications."]},{subtitle:"Step 1",text:"Open the TCP socket server (disable the firewall to properly\trun it. Folder ../hands_on_wifi/tcp socket server/server.exe"},{img:{width:381,height:192,alt:"open",src:"img/pages/Socket_interface/open.png"}},{subtitle:"Step 2",text:"The TCP server listens for incoming connections on the port 32000. It sends back all data received"},{img:{width:231,height:300,alt:"server",src:"img/pages/Socket_interface/server.png"}},{subtitle:"Step 3",text:"Display the client and the server use the socket identifier (ID) ",list:["Type AT+S.SOCKON=192.168.0.10x,32000,t,ind"]},{img:{width:254,height:300,alt:"id",src:"img/pages/Socket_interface/id.png",description:"Tera Term output"}},{title:"Write data to socket",text:"The SOCKW command allows to write data to the specified ID\tsocket.\t"},{text:"Syntax:",list:["AT+S.SOCKW=<ID>,<len>"]},{text:"Configuration parameters:",list:["<ID>: socket identifier","<len>: data length to send"]},{subtitle:"Step 1",text:"Write data",list:["Type AT+S.SOCKW=00,13","Type hello world<CR>\t"]},{img:{width:488,height:202,alt:"hello",src:"img/pages/Socket_interface/hello.png",description:"Socket"}},{img:{width:337,height:141,alt:"outputPend",src:"img/pages/Socket_interface/outputPend.png",description:"Tera Term output"}},{title:"Read data from socket",text:"The SOCKR command allows to read data from socket"},{text:"Syntax:",list:["AT+S.SOCKR=<ID>"]},{text:"Configuration parameters:",list:["<ID>: socket identifier","<len>: data length to read"]},{subtitle:"Step 1",text:"Read data",list:["Type AT+S.SOCKR=00,13"]},{img:{width:251,height:178,alt:"outpupHello",src:"img/pages/Socket_interface/outpupHello.png",description:"Tera Term output"}},{title:"Close socket",text:"The SOCKC command allows to close socket."},{text:"Syntax:",list:["AT+S.SOCKC=<ID>"]},{text:"Configuration parameters:",list:["<ID>: socket identifier"]},{subtitle:"Step 1",text:"Close socket",list:["Type AT+S.SOCKC=00"]},{img:{width:230,height:199,alt:"output",src:"img/pages/Socket_interface/output.png",description:"Tera Term output"}}]},A={articleTitle:"MiniAP mode for the first set",titleImg:{width:291,height:180,alt:"1",src:"img/pages/MiniAP_mode_first_set/1.png"},path:"MiniAP_mode_first_set",articleComponents:[{title:"Configuring the module in MiniAP mode",text:"The Mini AP mode is available starting from the following FW release:\tSPWF01S-131115-de4568d-RELEASE. In order to set the module in Mini AP mode, the following parameters\tare needed"},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=SPWF_AP"]},{subtitle:"Step 2",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0\t"]},{subtitle:"Step 3",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,3\t"]},{img:{width:191,height:101,alt:"output",src:"img/pages/MiniAP_mode_first_set/output.png",description:"Tera Term output"}},{subtitle:"Step 4",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:336,height:178,alt:"mode",src:"img/pages/MiniAP_mode_first_set/mode.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Configure the module using the WEP key (2 possible combinations\tavailable)"},{img:{width:838,height:228,alt:"table",src:"img/pages/MiniAP_mode_first_set/table.png",description:"Sample table"}},{title:"Mini AP mode"},{subtitle:"Step 1",text:"Associate your end device to the SPWF_AP network",list:["Find the SPWF_AP network and connect\tthe end device to the module"]},{img:{width:395,height:313,alt:"mobile",src:"img/pages/MiniAP_mode_first_set/mobile.png",description:"Find the SPWF_AP network"}},{img:{width:520,height:141,alt:"ap",src:"img/pages/MiniAP_mode_first_set/ap.png",description:"Tera Term output"}},{subtitle:"Step 2",text:"Associate your end device to the SPWF_AP network",list:["Open your web browser","In the address bar, type captiveportal.net ","The first set page allows to configure the module in IDLE mode, STATION mode, IBSS mode and MINI AP mode."]},{img:{width:304,height:323,alt:"captive",src:"img/pages/MiniAP_mode_first_set/captive.png",description:"Captiveportal.net"}},{img:{width:867,height:460,alt:"form",src:"img/pages/MiniAP_mode_first_set/form.png",description:"Captiveportal.net config"}},{subtitle:"Step 3",text:"Set all the parameters required in order to enable the connection between the module and a generic AP",list:["MiniAP PassKey: anonymous (by default)","SSID of the access point ","Password of the access point ","Authentication type of the access point ","Use mode of the module"]},{subtitle:"Step 3",text:"Set all the parameters required in order to enable the connection between the module and a generic AP",list:["MiniAP PassKey: anonymous (by default)","SSID of the access point ","Password of the access point ","Authentication type of the access point ","Use mode of the module"]},{img:{width:299,height:327,alt:"form",src:"img/pages/MiniAP_mode_first_set/form+.png",description:"Captiveportal.net config filled"}},{subtitle:"Step 4",text:"Click on GO! button and then send the\tparameters confirming with OK"},{img:{width:179,height:209,alt:"ok",src:"img/pages/MiniAP_mode_first_set/ok.png",description:"Captiveportal.net"}},{subtitle:"Step 5",text:"The module will receive the parameters and will automatically\tconnect to the access point required\t\t"},{img:{width:425,height:373,alt:"connected",src:"img/pages/MiniAP_mode_first_set/connected.png",description:"Tera Term output"}}]},C={articleTitle:"Socket interface - MiniAP mode",titleImg:{width:312,height:194,alt:"1",src:"img/pages/MiniAP_mode_socket_interface/1.png"},path:"MiniAP_mode_socket_interface",articleComponents:[{title:"Configuring the module in MiniAP mode",text:"The Mini AP mode (available starting from the SPWF01S-131115-de4568d-RELEASE) also allows to use the socket interface. In order to set the module in Mini AP mode, the following parameters are needed "},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=SPWF_AP"]},{subtitle:"Step 2",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0\t"]},{subtitle:"Step 3",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,3\t"]},{img:{width:191,height:101,alt:"output",src:"img/pages/MiniAP_mode_socket_interface/output.png",description:"Tera Term output"}},{subtitle:"Step 4",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:339,height:208,alt:"2",src:"img/pages/MiniAP_mode_socket_interface/2.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Connect your PC to the SPWF_AP network. \t",list:[" Find the SPWF_AP network and connect\tthe end device to the module"]},{img:{width:203,height:288,alt:"netw",src:"img/pages/MiniAP_mode_socket_interface/netw.png",description:"Networks"}},{img:{width:508,height:103,alt:"3",src:"img/pages/MiniAP_mode_socket_interface/3.png",description:"Tera Term output"}},{title:"The SOCKW command allows to write data to the specified ID\tsocket.",text:"The FSA command allows to append blocks of data to an existing file. This command accepts data after the <cr> at the end of the command line.\t"},{text:"Syntax:",list:["AT+S.SOCKW=<ID>,<len>"]},{text:"Configuration parameters:",list:["<ID>: socket identifier","<len>: data length to send "]},{subtitle:"Step 1",text:"Write data",list:["Type AT+S.SOCKW=00,13","Type hello world<CR>"]},{img:{width:477,height:202,alt:"socket",src:"img/pages/MiniAP_mode_socket_interface/socket.png",description:"Socket"}},{subtitle:"Step 1",text:"SPWF shows that there are <pending data> and their amount"},{img:{width:345,height:163,alt:"4",src:"img/pages/MiniAP_mode_socket_interface/4.png",description:"Tera Term output"}},{title:"Read data from socket",text:"The SOCKR command allows to read data from socket"},{text:"Syntax:",list:["AT+S.SOCKR=<ID>,<len>"]},{text:"Configuration parameters:",list:["<ID>: socket identifier","<len>: data length to read"]},{subtitle:"Step 1",text:"Read data",list:["Type AT+S.SOCKR=00,13"]},{img:{width:236,height:177,alt:"5",src:"img/pages/MiniAP_mode_socket_interface/5.png",description:"Tera Term output"}}]},P={articleTitle:"Remotely control - GPIOs",titleImg:{width:314,height:258,alt:"Remotely_control",src:"img/pages/Remotely_control/1.png"},path:"Remotely_control",articleComponents:[{title:"Remotely control - GPIO",text:"This feature allows to remotely write, configure and read a GPIO. The module should be connected to the AP (as shown in Lab 3) or\tshould be configured in Mini AP mode (as shown in Lab 8).\tThe external client have to open the remote.html page stored in the\tmodule."},{title:"Remotely control in MiniAP mode - GPIO",text:"In order to be connected to an available Wifi network, the AP\tparameters setting is needed."},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=ENG-WPA"]},{subtitle:"Step 2",text:"Set the password",list:["Type AT+S.SCFG=wifi_wpa_psk_text,helloworld"]},{subtitle:"Step 3",text:"Set the network privacy mode (0=none, 1=WEP, 2=WPA-Personal (TKIP/AES) or WPA2-Personal (TKIP/AES))",list:["AT+S.SCFG=wifi_priv_mode,2"]},{subtitle:"Step 4",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,1"]},{img:{width:205,height:169,alt:"output",src:"img/pages/Access_point_connection/output.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:411,height:306,alt:"outputReset",src:"img/pages/Access_point_connection/outputReset.png",description:"Tera Term output"}},{subtitle:"Step 6",list:["Open your web browser","In the address bar, type 192.168.x.1xx/remote.html"]},{img:{width:531,height:252,alt:"gpios",src:"img/pages/Remotely_control/gpios.png",description:"Web browser"}},{subtitle:"Step 7",text:"Save the settings on the flash memory and reset the module",list:["Try to write the GPIO14 connected to the LED3 (check if the LED3 is mounted on your EVAL BOARD, otherwise can be used\tthe GPIO13)","Click on the \xabGO!\xbb button  and LED3 will switch on"]},{img:{width:531,height:252,alt:"gpios",src:"img/pages/Remotely_control/gpios+.png",description:"Web browser"}}]},_={articleTitle:"Input demo",titleImg:{width:178,height:171,alt:"Input demo",src:"img/pages/Input_demo/1.png"},path:"Input_demo",articleComponents:[{text:"The module provides some DEMOs to show the interaction between the module and an external client connected to the same network. The module should be connected to the AP or should be configured in Mini AP mode. In order to run this demo, the client have to open the input_demo.shtml page stored in the module."},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=SPWF_AP"]},{subtitle:"Step 2",text:"Set the password\t",list:["TType AT+S.SCFG=wifi_wpa_psk_text,helloworld"]},{subtitle:"Step 3",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0\t"]},{subtitle:"Step 4",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,3\t"]},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:411,height:308,alt:"2",src:"img/pages/Access_point_connection/outputReset.png",description:"Tera Term output"}},{subtitle:"Step 5",list:["In the address bar, type: 192.168.x.1xx/input_demo.shtml"]},{img:{width:468,height:81,alt:"demo",src:"img/pages/Input_demo/demo.png",description:"Web browser"}},{subtitle:"Step 6",list:["Insert the message to the client i.e. type \xabtest\xbb (suggested \u2013 copy\tthe string and paste it in theterminal) and then send a carriage\treturn"]},{img:{width:417,height:228,alt:"test",src:"img/pages/Input_demo/test.png",description:"Web browser"}},{subtitle:"Step 7",list:["The module receives the HTML  page containing the string inserted  server-side.","Below this string, there are two  buttons to try again the demo or to return to the homepage"]}]},F={articleTitle:"Socket Server functionality",titleImg:{width:483,height:274,alt:"Input demo",src:"img/pages/Socket_Server/1.png"},path:"Socket_Server",articleComponents:[{text:"This feature allows to enable the socket server mode. The module can be able to listen for an incoming connection on the specified port. The module should be connected to the AP (as shown in Lab 3) or should be configured in Mini AP mode (as shown in Lab 8). Please refer to \u201cSocket Server Application Notes\u201d for more details."},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=SPWF_AP"]},{subtitle:"Step 2",text:"Set the password\t",list:["TType AT+S.SCFG=wifi_wpa_psk_text,helloworld"]},{subtitle:"Step 3",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0\t"]},{subtitle:"Step 4",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,3\t"]},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:411,height:306,alt:"output",src:"img/pages/Access_point_connection/outputReset.png",description:"Tera Term output"}},{subtitle:"Step 6",text:"Socket server: turn ON the TCP Socket Server (user must specify the server listening port) ",list:["Type AT+S.SOCKD=32000"]},{subtitle:"Step 7",text:"Check the status of the socket server",list:["Type AT+S.STS=ip_sockd_port"]},{img:{width:191,height:121,alt:"output",src:"img/pages/Socket_Server/2.png",description:"Tera Term output"}},{text:"Socket client: can be used a simple socket client in order to test the communication (SocketTest \u2013 available on http://sourceforge.net/projects/sockettest)"},{subtitle:"Step 8",text:"Socket client:",list:["Insert the module\u2019s IP Address and the port\t\t","Click on Connect button"]},{img:{width:369,height:302,alt:"output",src:"img/pages/Socket_Server/Socket.png",description:"Socket client"}},{img:{width:277,height:147,alt:"output",src:"img/pages/Socket_Server/3.png",description:"Tera Term output"},text:"The module (socket server) enters in data mode and a bidirectional channel is\tcreated to allow exchanging data with the socket client"},{subtitle:"Step 9",text:"Try to send and receive data from the module"},{img:{width:437,height:364,alt:"output",src:"img/pages/Socket_Server/Socket2.png",description:"Socket client"}},{img:{width:277,height:90,alt:"output",src:"img/pages/Socket_Server/4.png",description:"Tera Term output"},text:"The module (socket server) enters in data mode and a bidirectional channel is\tcreated to allow exchanging data with the socket client"},{title:"Socket Server \u2013 escape sequence",text:"From Data Mode to Command Mode. Configuration variable used: escape_seq (default is \u201cat+s.\u201d, case sensitive, suggested to be sent by the local host in a single complete packet with no CR or LF in the sequence)",list:["Type at+s"]},{text:"Now it\u2019s possible to send AT commands while the socket connection is still active"},{img:{width:257,height:164,alt:"output",src:"img/pages/Socket_Server/5.png",description:"Tera Term output"}},{title:"Socket Server \u2013 return to data mode",text:"While in Command Mode. ",list:["Type at+s"]},{text:"The module returns in data mode"},{img:{width:272,height:144,alt:"output",src:"img/pages/Socket_Server/6.png",description:"Tera Term output"}},{title:"Socket Server \u2013 turn off",text:"Turn OFF the Socket Server ",list:["Type at+s","Type AT+S.SOCKD=0\t\t"]},{img:{width:272,height:184,alt:"output",src:"img/pages/Socket_Server/6.png",description:"Tera Term output"}}]},I={articleTitle:"Low power modes",titleImg:{width:203,height:211,alt:"1",src:"img/pages/Low_power_modes/1.png"},path:"Low_power_modes",articleComponents:[{text:"This feature allows to enable the low power states. The module supports the \u201cRadio Power Save\u201d mode, the \u201cSleep\u201d  mode and the \u201cStandby\u201d mode.  The module should be connected to the AP (as shown in Lab 3) in  order to use the \u201cRadio Power Save\u201d mode.  Please refer to \u201cSPWF01S Power Management Application Notes\u201d for  more details."},{subtitle:"Step 1",text:"Set the SSID",list:["Type AT+S.SSIDTXT=SPWF_AP"]},{subtitle:"Step 2",text:"Set the password\t",list:["TType AT+S.SCFG=wifi_wpa_psk_text,helloworld"]},{subtitle:"Step 3",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0\t"]},{subtitle:"Step 4",text:"Set the network mode (1 = STA, 2 = IBSS, 3 = MiniAP)",list:["Type AT+S.SCFG=wifi_mode,3\t"]},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:411,height:306,alt:"output",src:"img/pages/Access_point_connection/outputReset.png",description:"Tera Term output"}},{title:"Low power modes \u2013 Power Save",text:"By default, the module starts in ACTIVE mode."},{img:{width:658,height:359,alt:"output",src:"img/pages/Low_power_modes/Table.png",description:"Low power modes"}},{subtitle:"Step 1",text:"Enable the Power Save Mode:",list:["Type at+s.scfg=wifi_powersave,1 (\u201cwifi_powersave,2\u201d enables the Fast-PS mode)"]},{subtitle:"Step 2",text:"Enable the doze operational mode:\t\t",list:["Type at+s.scfg=wifi_operational_mode,11 (\u201cwifi_operational_mode,12\u201d enables the\tquiescent mode)"]},{subtitle:"Step 3",text:"Choose the wake up mode:",list:["Type at+s.scfg=wifi_listen_interval,0","Type at+s.scfg=wifi_beacon_wakeup,1"]},{subtitle:"OR"},{list:["Type at+s.scfg=wifi_listen_interval,1","Type at+s.scfg=wifi_beacon_wakeup,1"]},{subtitle:"Step 4",text:"Save the settings on the flash memory and reset the module. The WIND:66 message related to Low Power Mode will be\tdisplayed",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:412,height:318,alt:"output",src:"img/pages/Low_power_modes/2.png",description:"Tera Term output"}},{title:"Low power modes \u2013 Sleep Mode",text:"In the Sleep Mode, the core STM32 is stopped"},{img:{width:658,height:359,alt:"output",src:"img/pages/Low_power_modes/Table2.png",description:"Low power modes"}},{subtitle:"Step 1",text:"Enable the Sleep Mode:\t",list:["Type at+s.scfg=sleep_enabled,1"]},{subtitle:"Step 2",text:"Enable the Power Save Mode:",list:["Type at+s.scfg=wifi_powersave,1 (\u201cwifi_powersave,2\u201d enables the Fast-PS mode)"]},{subtitle:"Step 3",text:"Enable the doze operational mode:",list:["Type at+s.scfg=wifi_operational_mode,11 (\u201cwifi_operational_mode,12\u201d enables the quiescent\t\tmode)"]},{subtitle:"Step 4",text:"Choose the wake up mode:",list:["Type at+s.scfg=wifi_listen_interval,0","Type at+s.scfg=wifi_beacon_wakeup,1"]},{subtitle:"OR"},{list:["Type at+s.scfg=wifi_listen_interval,1\t  ","Type at+s.scfg=wifi_beacon_wakeup,1"]},{subtitle:"Step 5",text:"Save the settings on the flash memory and reset the module. The WIND:66 message related to Low Power Mode will be\tdisplayed",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:420,height:323,alt:"output",src:"img/pages/Low_power_modes/2.png",description:"Tera Term output"}},{subtitle:"Step 6",text:"Wake STM32 up using the GPIO6",list:["Put the GPIO6 to 2.5V"]},{subtitle:"Step 8",text:"The WIND messages will be displayed"},{img:{width:315,height:139,alt:"output",src:"img/pages/Low_power_modes/4.png",description:"Tera Term output"}},{subtitle:"Step 9",text:"Put STM32 in sleep mode using the GPIO6",list:["Go back the GPIO6 floating (remove jumper- as default)"]},{subtitle:"Step 10",text:"The WIND messages will be displayed"},{img:{width:336,height:179,alt:"output",src:"img/pages/Low_power_modes/5.png",description:"Tera Term output"}},{title:"Low power modes \u2013 Standby Mode",text:"During the Standby Mode, both the STM32 and the Radio will be\tput in standby mode. The standby mode allows to achieve the\tlowest power consumption."},{img:{width:658,height:359,alt:"output",src:"img/pages/Low_power_modes/Table3.png",description:"Low power modes"}},{subtitle:"Step 1",text:"Enable the Standby Mode",list:["Type at+s.scfg=sleep_enabled,0 (Sleep mode must be disabled)","Type at+s.scfg=standby_enabled,1"]},{subtitle:"Step 2",text:"Set the standby time to wake up via RTC alarm",list:["Type at+s.scfg=standby_time,15"]},{subtitle:"Step 3",text:"Save the settings on the flash memory and reset the module. The WIND:66 message related to Low Power Mode will be\tdisplayed",list:["Type AT&W","Type AT+CFUN=1"]},{subtitle:"Step 4",text:"After 15 seconds, the module will be rebooted and will return in the ACTIVE state.\t",list:["Type at+s.scfg=standby_time,15"]},{img:{width:415,height:417,alt:"output",src:"img/pages/Low_power_modes/6.png",description:"Tera Term output"}},{subtitle:"Step 5",text:"Wake up the module using the GPIO6. Enable the Standby Mode:\t",list:["Type at+s.scfg=sleep_enabled,0 (make sure that Sleep mode is disabled)","Type at+s.scfg=standby_enabled,1","Type AT&W","Type AT+CFUN=1"]},{subtitle:"Step 6",text:"Put the GPIO6 to 2.5V to wake up the module. The WIND message will be displayed and the module will return in ACTIVE state\t",list:["Type at+s.scfg=standby_time,15"]},{img:{width:305,height:135,alt:"output",src:"img/pages/Low_power_modes/7.png",description:"Tera Term output"}}]},k={articleTitle:"STA/MINI AP switcher",titleImg:{width:311,height:191,alt:"1",src:"img/pages/MINIAP_switcher/1.png"},path:"STA_MINIAP_switcher",articleComponents:[{text:"This feature allows to force the module in Mini AP mode starting from  a preexistent state.  \u201cRecovery Mode\u201d: this functionality could be useful to lead the module  in a known state and to reconfigure it (i.e. using the firstset page).  The GPIO7 will be used to drive this feature."},{subtitle:"Step 1",list:["Press and hold the SW2 button on the\tEVAL and then perform a reset (HW reset via SW1 button or SW reset via AT\tcommand)\t"]},{subtitle:"Step 2",list:["Release the SW2 button"]},{subtitle:"Step 3",text:"The MiniAP mode will be started and the\tmodule is discoverable with the following\t\tSSID:",list:[" iwm-XX-YY-ZZ where XX-YY-ZZ are the last\tsix digits of module\u2019s MAC ADDRESS"]},{img:{width:306,height:335,alt:"output",src:"img/pages/MINIAP_switcher/2.png",description:"Tera Term output"}}]},O={articleTitle:"IBSS connection",titleImg:{width:262,height:278,alt:"1",src:"img/pages/IBSS_connection/1.png"},path:"IBSS_connection",articleComponents:[{title:"Create an IBSS network",text:"In an IBSS network, the SSID is chosen by the client device that\tstarts the network."},{subtitle:"Step 1",text:"Set the IBSS SSID",list:["Type AT+S.SSIDTXT=ADHOC"]},{subtitle:"Step 2",text:"Set the network privacy mode (0=OPEN or 1=WEP are supported)",list:["Type AT+S.SCFG=wifi_priv_mode,0"]},{subtitle:"Step 3",text:"Set the network mode (2 = IBSS)",list:["Type AT+S.SCFG=wifi_mode,2\t"]},{subtitle:"Step 4",text:"Set IP address, IP default gateway, IP DNS and IP netmask",list:["Type AT+S.SCFG=ip_ipaddr,192.168.y.1xx","Type AT+S.SCFG=ip_gw,192.168.y.1","Type AT+S.SCFG=ip_dns,192.168.y.1","Type AT+S.SCFG=ip_netmask,255.255.255.0"]},{subtitle:"Step 5",text:"Turn off the DHCP",list:["Type AT+S.SCFG=ip_use_dhcp,0"]},{subtitle:"Step 6",text:"Save the settings on the flash memory and reset the module",list:["Type AT&W","Type AT+CFUN=1"]},{img:{width:412,height:241,alt:"2",src:"img/pages/IBSS_connection/2.png",description:"Tera Term output"}},{subtitle:"Step 7",text:"Associate the iOS device with the\tADHOC network ",list:["Type AT&W","Type AT+CFUN=1"]},{subtitle:"Step 8",text:"Open Safari web browser. In the address bar, type\t<SPWF IP address>/index.html. ",list:["Type 192.168.y.1xx/index.htm"]},{img:{width:406,height:162,alt:"2",src:"img/pages/IBSS_connection/3.png",description:"Web browser"}}]},L={id:1,sectionTitle:"INTRODUCTION TO STM32",articles:[{articleTitle:"History of STM32",titleImg:{width:1091,height:528,alt:"Stm32",src:"img/pages/history/stmPicture.jpg"},path:"history",articleComponents:[{title:"iNTRODUCTION",text:"The STM32 value line Discovery evaluation board helps you discover the STM32 value line\n\t\t\t features and to develop and share your applications. It is based on an STM32F100RBT6B\n\t\t\t and includes ST-Link embedded debug tool interface, LEDs and push buttons. "},{title:"features",list:["STM32F100RBT6B microcontroller, 128 KB Flash, 8 KB RAM in 64-pin LQFP","On-board ST-Link with selection mode switch to use the kit as a stand-alone ST-Link (withSWD connector for programming and debugging)","Two red LEDs; LD1 for USB communication, LD2 for 3.3 volts power on","Designed to be powered by USB or an external supply of 5 V or 3.3 V","Can supply target application with 5 volts and 3 volts","Two user LEDs, LD3 and LD4 (green and blue)","Two push buttons (User and Reset)","Extension header for all QFP64 I/Os for quick connection to prototyping board or easy probing"]},{title:"history",text:"The STM32 is the third ARM family by STMicroelectronics. It follows their earlier STR9 family based on the ARM9E core,and STR7 family based on the ARM7TDMI core.The following is the history of how the STM32 family has evolved."},{subtitle:"In October 2006",text:"The STM32 is the third ARM family by STMicroelectronics. It follows their earlier STR9 family based on the ARM9E core,and STR7 family based on the ARM7TDMI core.The following is the history of how the STM32 family has evolved."},{subtitle:"In June 2007",text:"ST announced the STM32 F1-series based on the ARM Cortex-M3."},{subtitle:"In October 2009",text:"ST announced that new ARM chips would be built using the 90 nm process."},{subtitle:"In April 2010",text:"ST announced the STM32 L1-series chips."},{subtitle:"In November 2010",text:"ST announced the STM32 F2-series chips based on the ARM Cortex-M3 core, and future development of chips based on the ARM Cortex-M4 and ARM Cortex-M3 cores."},{subtitle:"In February 2011",text:"ST announced the STM32L-DISCOVERY board."},{subtitle:"In March 2011",text:"ST announced the expansion of their STM32 L1-series chips with flash densities of 256 KB and 384 KB."},{subtitle:"In September 2011",text:"ST announced the STM32 F4-series chips based on the ARM Cortex-M4F core and STM32F4DISCOVERY board."},{subtitle:"In February 2012",text:"ST announced the STM32 F0-series chips based on the ARM Cortex-M0 core."},{subtitle:"In May 2012",text:"ST announced the STM32F0DISCOVERY board."},{subtitle:"In June 2012",text:"ST announced the STM32 F3-series chips based on the ARM Cortex-M4F core."},{subtitle:"In September 2012",text:"ST announced full-production of STM32 F3-series chips and STM32F3DISCOVERY board. The STM32 F050-series will also be available in a TSSOP20 package."},{subtitle:"In January 2013",text:"ST announced full Java support for STM32 F2 and F4-series chips."},{subtitle:"In February 2013",text:"ST announced STM32 Embedded Coder support for MATLAB and Simulink."},{subtitle:"In April 2013",text:"ST announced the STM32 F401-series chips."},{subtitle:"In July 2013",text:"ST announced the STM32 F030-series chips. The STM32 F030-series will also be available in a TSSOP20 package."},{subtitle:"In September 2013",text:"ST announced the STM32F401C-DISCO and STM32F429I-DISCO boards."},{subtitle:"In October 2013",text:"ST announced the STM32F0308DISCOVERY board."},{subtitle:"In December 2013",text:"ST announced that it is joining the mbed project."},{subtitle:"In January 2014",text:"ST announced the STM32 F0x2-series chips, STM32F072B-DISCO board, and STM32072B-EVAL board."},{subtitle:"In February 2014",list:["ST announced the STM32 L0-series chips based on the ARM Cortex-M0+ core.","ST announced multiple STM32 Nucleo boards with Arduino headers and mbed","ST announced the release of free STM32Cube software tool with graphical configurator and C code generator."]},{subtitle:"In April 2014",text:"ST announced the STM32F30x chips are now available in full production. A new NUCLEO-F302R8 board was also announced."},{subtitle:"In September 2014",text:"ST announced the STM32 F7 series, the first chips based on the Cortex-M7F core."},{subtitle:"In October 2016",text:"ST announced the STM32H7 series based on the ARM Cortex-M7F core. The device runs at 400 MHz and is produced using 40 nm technology."},{subtitle:"In November 2017",text:"ST announced the STM32L4+ series, an upgrade to the STM32L4 series Cortex-M4 MCUs."},{subtitle:"In October 2018",text:"ST announced the STM32L5 series, ultra-low-power MCUs based on the ARM Cortex-M33 core with a variety of security features, such as TrustZone, Secure Boot, active IO tamper detection, Secure Firmware Install loader, certified cryptolib etc."},{subtitle:"In February 2021",text:"ST announced the STM32U5 series, ultra-low-power MCUs based on the ARM Cortex-M33 core with a variety of low power and security features, such as TrustZone, Secure Boot, active IO tamper detection, hardware-based protection targeting PSA and SESIP assurance level 3, etc"}]},{articleTitle:"Series",path:"Series",articleComponents:[{title:"STM32F0",text:"The STM32F0 series is the famous 32-cents for 32-bit line of MCU from the STM32 portfolio. It is designed to have a street price able to compete with 8/16-bit MCUs from other vendors, offering a more advanced and powerful platform. The most important features of this series are: ",list:["ARM Cortex-M0 core at a maximum clock rate of 48 MHz","Cortex-M0 options include the SysTick Timer.","Static RAM from 4 to 32 KB.","Flash from 16 to 256 KB."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F0-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: LQFP, TSSOP20\xb9\u2079, UFBGA, UFQFPN, WLCSP","Operating voltage range is 2.0V to 3.6V with the possibility to go down to 1.8V \xb18%."]},{img:{width:643,height:276,alt:"fo",src:"img/pages/Series/1.png",description:"STM32F0 features"}},{title:"STM32F1 ",text:"The STM32F1 series was the first ARM based MCU from ST. Introduced in the market in 2007, it is still the most widespread MCU from the STM32 portfolio. Plenty of development boards are available on the market, produced by ST and other vendors, and you will find tons of examples on the web for F1 microcontrollers. If you are new to the STM32 world, probably the F1 line is the best choice to start working with to learn this platform. The F1-series has evolved over time by increasing speed, size of internal memory, variety of peripherals. There are five F1 lines: Connectivity (STM32F105/107), Performance (STM32F103), USB Access (STM32F102), Access (STM32F101), Value (STM32F100). The most important features of this series are: ",list:["ARM Cortex-M3 core at a maximum clock rate ranging from 24 to 72 MHz.\t\t  ","Static RAM from 4 to 32 KB.","Flash from 16 to 256 KB."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F1-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: LFBGA, LQFP, UFBGA, UFQFPN, WLCSP ","Operating voltage range is 2.0V to 3.6V with the possibility to go down to 1.8V \xb18%.","Multiple connectivity options, including Ethernet, CAN and USB 2.0 OTG"]},{img:{width:643,height:300,alt:"fo",src:"img/pages/Series/2.png",description:"STM32F1 features"}},{title:"STM32F2 ",text:"The STM32F2 series of STM32 microcontrollers is the cost-effective solution in the High-performance segment. It is the most recent and fastest Cortex-M3 based MCU, with exclusive ARTTM Accelerator from ST. The F2 is pin-to-pin compatible with the STM32 F4-series. STM32F2 was the MCU chosen by the developers of popular Pebble watch for their first smart-watch.The most important features of this series are: ",list:["ARM Cortex-M3 core at a maximum clock rate of 120 MHz. ","Static RAM from 64 to 128 KB.","Flash from 128 to 1024 KB"," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F3-series device features a range of peripherals which vary from line to line ","Oscillators consist of internal RC (16 MHz, 32 kHz), optional external HSE (1 to 26 MHz), LSE(32.768 to 1000 kHz).","IC packages: LFBGA, LQFP, UFBGA, UFQFPN, WLCSP ","Operating voltage range is 1.8V to 3.6V."]},{img:{width:643,height:236,alt:"fo",src:"img/pages/Series/3.png",description:"STM32F2 features"}},{title:"STM32F3 ",text:"The STM32F3 is the most powerful series of MCU in the Mainstream segment, based on the ARM Cortex-M4F core. It is designed to be almost pin-to-pin compatible with the STM32 F1-series, even if it does not offer the same variety of peripherals. STM32F3 was the MCU chosen by the developers of the BB-8 droid toy by Sphero. The most important features of this series are:",list:["ARM Cortex-M4F core at a maximum clock rate of 72 MHz","Static RAM from 16 to 80 KB general-purpose with hardware parity check.","Flash from 32 to 512 KB"," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F3-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: LFBGA, LQFP, UFBGA, UFQFPN, WLCSP "," Up to 8 KB Core Coupled Memory (CCM) with hardware parity check."]},{img:{width:643,height:300,alt:"fo",src:"img/pages/Series/4.png",description:"STM32F3 features"}},{title:"STM32F4 ",text:"The STM32F4 series is the most widespread group of Cortex-M4F based MCUs in the Highperformance segment. The F4-series is also the first STM32 series to have DSP and Floating Point SP instructions. The F4 is pin-to-pin compatible with the STM32 F2-series and adds higher clock speed, 64K CCM static RAM, full duplex I\xb2S, improved real-time clock, and faster ADCs. The STM32F4- series is also targeted to multimedia applications, and some MCUs offer dedicated support for LCDTFT. The most important features of this series are",list:["ARM Cortex-M4F core at a maximum clock ranging from 84 to 180 MHz","Static RAM from 128 to 384 KB","64 KB Core Coupled Memory (CCM).","Flash from 256 to 2048 KB"," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F4-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: BGA, LQFP, TFBGA, UFBGA, UFQFPN, WLCSP","Operating voltage range is 1.8V to 3.6V."]},{img:{width:643,height:567,alt:"fo",src:"img/pages/Series/5.png",description:"STM32F4 features"}},{title:"STM32F7 ",text:"The STM32F7 series is the latest ultra-performance MCU in the High-performance segment, and it was the first Cortex-M7 based MCU introduced on the market. Thanks to ST\u2019s ARTTM Accelerator as well as an L1 cache, STM32F7 devices deliver the maximum theoretical performance of the CortexM7 regardless of code being executed from embedded flash or external memory: 1082 CoreMark/462 DMIPS at 216 MHz. STM32F7 is clearly targeted to heavy multimedia embedded applications. Thanks to the STM32 longevity program (10 years) it is possible to develop powerful embedded applications without worrying about the MCU availability on the market in the far future. CortexM7 is backwards compatible with the Cortex-M4 instruction set, and STM32F7 series is pin-to-pin compatible with the STM32F4 series. The most important features of this series are:",list:["ARM Cortex-M7 core at a maximum clock of 216 MHz.","Static RAM up to 512 KB with scattered architecture","L1 cache (I/D up to 16 KB + 16 KB).","Flash from 512 to 2048 KB."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each F7-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: LQFP, TFBGA, UFBGA, WLCSP","Operating voltage range is 1.7V to 3.6V.."]},{img:{width:643,height:390,alt:"fo",src:"img/pages/Series/6.png",description:"STM32F7 features"}},{title:"STM32H7 ",text:"ST announced in October 2016 a new family of STM32 MCUs: the STM32H7. This is a Cortex-M7 made with a 40nm process, able to run up to 400MHz. It also provides a 1MB SRAM with the same scattered architecture found in the STM32F7-series. According to this author, this family of STM32 MCUs will open the doors to dual-core STM32 MCUs, tanks to the 40nm production process. At the time of finalizing the book, these are the specs of the STM32H7-series: ",list:["ARM Cortex-M7 core at a maximum clock of 400 MHz.","Static RAM up to 1024 KB with scattered architecture.\t\t  ","L1 cache (I/D up to 16 KB + 16 KB).","Flash from 512 to 2048 KB."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each H7-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages: LQFP, TFBGA","Pin-to-pin compatible with the STM32F7-series."]},{img:{width:643,height:245,alt:"fo",src:"img/pages/Series/7.png",description:"STM32H7 features"}},{title:"STM32L0 ",text:"The STM32L0 series is the cost-effective solution of the Ultra Low-Power segment. The combination of an ARM Cortex-M0+ core and ultra-low-power features makes STM32L0 the best fit for applications operating on battery or powered by energy harvesting, offering the world\u2019s lowest power consumption at 125\xb0C. The STM32L0 offers dynamic voltage scaling, an ultra-low-power clock oscillator, LCD interface, comparator, DAC and hardware encryption. The most important features of this series a ",list:["ARM Cortex-M0+ core at a maximum clock rate of 32 MHz.","Static RAM of 8 KB","L1 cache (I/D up to 16 KB + 16 KB).","Flash from 32 to 64 KB.","EEPROM up to 2 KB (with ECC)."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each L0-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  LQFP, TFBGA, UFQFPN, WLCSP","Operating voltage range is 1.65V to 3.6V.  "]},{img:{width:643,height:263,alt:"fo",src:"img/pages/Series/8.png",description:"STM32L0 features"}},{title:"STM32L1",text:"The STM32L1 series is the mid-range solution of the Ultra Low-Power segment. The combination of an ARM Cortex-M3 core with FPU and ultra-low-power features makes the STM32L1 optimal for applications operating on battery that also demand sufficient computing power. Like the L0-series, The STM32L1 offers dynamic voltage scaling, an ultra-low-power clock oscillator, LCD interface, comparator, DAC and hardware encryption. The STM32L1 series is the mid-range solution of the Ultra Low-Power segment. The combination of an ARM Cortex-M3 core with FPU and ultra-low-power features makes the STM32L1 optimal for applications operating on battery that also demand sufficient computing power. Like the L0-series, The STM32L1 offers dynamic voltage scaling, an ultra-low-power clock oscillator, LCD interface, comparator, DAC and hardware encryption. ",list:["ARM Cortex-M3 core with FPU at a maximum clock rate of 32 MHz","Static RAM from 4 to 80 KB.","Flash from 32 to 512 KB.","EEPROM up to 2 KB (with ECC)."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each L1-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  LQFP, TFBGA, UFBGA, UFQFPN, WLCSP","Operating voltage range is 1.65V to 3.6V, including a programmable brownout detector"]},{img:{width:643,height:272,alt:"fo",src:"img/pages/Series/9.png",description:"STM32L1 features"}},{title:" STM32L4",text:"The STM32L4 series is one of the best-in-class MCU series in the Ultra Low-Power segment. The combination of an ARM Cortex-M4 core with FPU and ultra-low-power features, makes the STM32L4 the best fit for applications demanding high performance while operating on battery or powered by energy harvesting. Like the L1-series, The STM32L4 offers dynamic voltage scaling and an ultra-low-power clock oscillator. STM32L4 is pin-to-pin compatible with several MCU from the STM32F series. The most important features of this series are:",list:["ARM Cortex-M4F core with FPU at a maximum clock rate of 80 MHz. ","Static RAM up to 320 KB","Flash sizes from 256 to 1024 KB.","Support to SDMMC and FSMC interfaces."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each L4-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  LQFP, UFBGA, WLCSP ","Operating voltage range is 1.7V to 3.6V."]},{img:{width:643,height:429,alt:"fo",src:"img/pages/Series/10.png",description:"STM32L1 features"}},{title:" STM32L4",text:"The STM32L4 series is one of the best-in-class MCU series in the Ultra Low-Power segment. The combination of an ARM Cortex-M4 core with FPU and ultra-low-power features, makes the STM32L4 the best fit for applications demanding high performance while operating on battery or powered by energy harvesting. Like the L1-series, The STM32L4 offers dynamic voltage scaling and an ultra-low-power clock oscillator. STM32L4 is pin-to-pin compatible with several MCU from the STM32F series. The most important features of this series are:",list:["ARM Cortex-M4F core with FPU at a maximum clock rate of 80 MHz. ","Static RAM up to 320 KB","Flash sizes from 256 to 1024 KB.","Support to SDMMC and FSMC interfaces."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each L4-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  LQFP, UFBGA, WLCSP ","Operating voltage range is 1.7V to 3.6V."]},{img:{width:643,height:429,alt:"fo",src:"img/pages/Series/10.png",description:"STM32L4 features"}},{title:" STM32L4+",text:"The STM32L4+ series, introduced on the market at the end of 2017, is the new best-in-classMCU series in the Ultra Low-Power segment. The STM32L4+ series shatters processing capabilitiesIntroduction to STM32 MCU Portfolio 41limits in the ultra\u2010low\u2010power world by delivering 150 DMIPS/409 CoreMark score while executingfrom internal Flash memory and by embedding 640 Kbytes SRAM enabling more advancedconsumer, medical and industrial low-power applications and devices. STM32L4+ microcontrollersoffer dynamic voltage scaling to balance power consumption with processing demand, low\u2010powerperipherals (LP UART, LP timers) available in Stop mode, safety and security features, smart andnumerous peripherals, advanced and low\u2010power analog peripherals such as op amps, comparators,12\u2010bit DACs and 16\u2010bit ADC (hardware oversampling). The new STM32L4+ series also embedsadvanced graphic features enabling state\u2010of\u2010the\u2010art graphic user interfaces. The Chrom\u2010ART Accelerator\u2122, ST\u2019s proprietary 2D hardware graphic accelerator, efficiently handles repetitive graphicoperations releasing the main CPU capabilities for real time processing or even more advancedgraphic operations. The Chrom\u2010ART Accelerator is coupled with the large embedded SRAM, theChrom\u2010GRC\u2122 round display memory optimizer, the high-throughput Octo-SPI interface and to theadvanced TFT and DSI controllers, allowing you to achieve \u2018smartphone\u2010like\u2019 graphic user interfacesin a single\u2010chip and an ultra\u2010low power solution. STM32L4+ is pin-to-pin compatible with several MCU from the STM32F series. The most importantfeatures of this series are:",list:["ARM Cortex-M4F core with FPU at a maximum clock rate of 120 MHz.\t\t  ","Static RAM up to 640 KB.","Flash sizes from 1024 to 2048 KB.","Support to SDMMC and FSMC interfaces."," Each chip has a factory-programmed 96-bit unique device identifier number.","Each L4+-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  Support to SDMMC and FSMC interfaces ","Operating voltage range is 1.7V to 3.6V."]},{img:{width:643,height:357,alt:"fo",src:"img/pages/Series/11.png",description:"STM32L4+ features"}},{title:"STM32WB",text:"The STM32WB series, introduced on the market at the beginning of 2018, is the new MCU series in the Wireless segment. STM32WB is a lineup of dual-core STM32 microcontrollers with integrated 2.4GHz radio fronted suitable for wireless and Bluetooth 5.0 applications. These MCUs feature a Cortex-M0+ core running at 32 MHz (named Network Processor) dedicated to the radio management (a companion BLE 5.0 stack is also provided by ST) and a user-programmable Cortex-M4 core running at 64 MHz (named Application Processor) for the main embedded application. The STM32WB platform is an evolution of the STM32L4 Ultra Low\u2011Power series of MCUs. It provides the same digital and analog peripherals suitable for applications requiring extended battery life and complex functionalities. STM32WB integrate several communication peripherals, a convenient crystal-less USB2.0 FS interface, audio support, an LCD driver, up to 72 GPIOs, an integrated SMPS for power consumption optimization and multiple low-power modes to maximize battery life. On top of wireless and low\u2010power features, a particular focus was placed on embedding security hardware functions such as a 256\u2010bit AES, PCROP, JTAG Fuse, PKA (elliptic curve encryption engine), and Root Secure Services (RSS). The RSS allows authenticating OTA communications, regardless of the radio stack or application. The STM32WB55 is a Bluetooth 5.0 certified device and it offers Mesh 1.0 software support, multiple profiles and flexibility to integrate proprietary BLE stacks. OpenThread-certified software stack is also available. The radio can also run BLE/OpenThread protocols concurrently. The embedded generic MAC allows the usage of other IEEE 802.15.4 proprietary stacks like ZigBee\xae, or proprietary protocols, giving even more options for connecting devices to the Internet of Things (Io ",list:["ARM Cortex-M4F core with FPU at a maximum clock rate of 64 MHz (Application\tProcessor). * ARM Cortex-M0+ core a maximum clock rate of 32 MHz (Network Processor).","Static RAM up to 256 KB","Flash sizes up to 1024 KB.","Support to Quad-SPI interface"," Each chip has a factory-programmed 96-bit unique device identifier number.","Each STM32WB-series device features a range of peripherals which vary from line to line ","Oscillator source consists of internal RC (8 MHz, 40 kHz), optional external HSE (4 to 32 MHz), LSE (32.768 to 1000 kHz).","IC packages:  WLCSP, UFQFPN, VFQFPN  ","Operating voltage range is 1.7V to 3.6V."]},{img:{width:643,height:188,alt:"fo",src:"img/pages/Series/12.png",description:"STM32WB features"}}]},{articleTitle:"Development tools",path:"DevelopmentTools",articleComponents:[{title:"Simulink",text:"Simulink, by MathWorks provides model-based design solutions to design embedded systems. The Embedded Coder Support Package for STMicroelectronics Discovery Boards and the Simulink Coder Support Package for STMicroelectronics Nucleo Boards provide parameter tuning, signal monitoring and one-click deployment of Simulink algorithms to STM32 boards with access to peripherals like ADC, PWM, GPIOs, I\xb2C, SPI, SCI, TCP/IP, UDP, etc."},{title:"Flash programming via USART",text:"All STM32 microcontrollers have a ROM'ed bootloader that supports loading a binary image into its flash memory using one or more peripherals (varies by STM32 family). Since all STM32 bootloaders support loading from the USART peripheral and most boards connect the USART to RS-232 or a USB-to-UART adapter IC, thus it's a universal method to program the STM32 microcontroller. This method requires the target to have a way to enable/disable booting from the ROM'ed bootloader (i.e. jumper / switch / button)."},{title:"STM32CubeMX",text:"STM32CubeMX is a graphical tool used to configure any STM32 device. This easy-to-use graphical user interface generates the initialization C-code for Cortex-M cores and generates the Linux Device Tree for Cortex-A cores."},{title:"STM32CubeMonitor",text:"STM32CubeMonitor data visualization tools enable to monitor and diagnose STM32 applications at runtime. In addition to specialized versions,  the versatile  STM32CubeMonitor tool helps to visualize the application behavior on host devices in various form factors such as PCs, tablets, or smartphones with remote data acquisition."},{title:"STM32CubeIDE",text:"Eclipse Java based IDE for STM32 products"}]},{articleTitle:"Programming STM32",path:"Programming_STM32",articleComponents:[{text:"This tutorial shows how to use the STM32CubeMX tool to initialize the peripherals, build and generate your starting projects with the initialization C code using HAL libraries."},{subtitle:"Hardware",text:"The hardware requirements to start the application are the following:",list:["NUCLEO-L476RG board","USB Type-A to Mini-B cable"]},{title:"Create New Project using STM32CubeMX",text:"Run STM32CubeMX tool. Click New Project or Menu -> File -> New Project. From Board Selector section, filter to select and use NUCLEO-L476RG board. Check Nucleo64 type. Check STM32L4 on MCU Series.\tSelect NUCLEO-L476RG board using Board selector. Click Start Project to continue.\tAnswer Yes Initialize all peripherals with their default Mode ? popup"},{img:{width:1044,height:552,alt:"1",src:"img/pages/programming_Stm32/1.png",description:""}},{title:"Pinout Configuration",text:"Verify in Pinout tab, under SYS peripheral, that Serial Wire is selected as Debug interface:"},{img:{width:1113,height:733,alt:"1",src:"img/pages/programming_Stm32/2.png",description:""}},{text:"The corresponding pins PA13 and PA14 are assigned and configured automatically.\t When a board is selected, STM32CubeMX allows automatically the pinout setting for the board with the pin assignments for the communication interfaces, LEDs, and other functions.\t (To configure LED pins, check in the STM32 Nucleo-64 boards User Manual and STM32L476xx Datasheet which LED pins to use)."},{title:"Clock Configuration",text:"In the Clock Configuration tab, check that STM32CubeMX automatically configures the internal oscillator in the clock system with PLL @80MHz and proposes the PLL configuration as follows:",list:["HSI selected in PLL Source Mux (HSI \u2013 High Speed Internal clock)","PLLCLK selected in the System Clock Mux","HCLK set to 80"]},{img:{width:1095,height:585,alt:"1",src:"img/pages/programming_Stm32/3.png",description:""}},{title:"GPIO Configuration",text:"In the GPIO Tab, select Pin Name column PA5 to display the corresponding GPIO parameters and configuration to drive the NUCLEO-L476RG LED:",list:["GPIO Output level: it is set to Low by default and can be changed to High.","GPIO mode automatically configures the pins with the relevant alternate function and GPIOs into Output Push Pull mode.","GPIO Pull-up/Pull-dow set to No pull-up and no pull-down by default can be configured when other choices are allowed.","GPIO Maximum output speed set to Low by default for the power consumption optimization can be changed to a higher frequency to fit the application requirements.","User Label is a name assigned to a GPIO. The GPIO can be found under this name via the Find menu.","Click Apply then OK to close the window."]},{img:{width:607,height:540,alt:"1",src:"img/pages/programming_Stm32/4.png",description:""}},{title:"Configure project and generate source code",text:"Switch to the Project Manager tab to configure the project. In the Project tab:Fill the Project Name and Project Location field, set Toolchain/IDE to STM32CubeIDE. In the Code Generator tab, ensure that the following options are checked:\tIn STM32Cube Firmware Library Package section: Copy all used libraries into the project folder, in Generated files section: Keep user code when regenerating the C code option, which only applies to the user sections within the STM32CubeMX generated files. To generate the project in STM32CubeIDE: Click on Generate Code, click on Open Project to open the project with STM32CubeIDE."},{title:" Edit main.c to toggle the LED",text:"In STM32CubeIDE, from the Project Explorer tab, open the main.c file, in Src folder and add the adequate functions for the LED blinking, using HAL functions with the STM32CubeL4 firmware package"},{img:{width:619,height:352,alt:"1",src:"img/pages/programming_Stm32/5.png",description:""}},{text:"The user code can be added in the main.c file, inside the while (1) loop between /* USER CODE BEGIN 3 */ and /* USER CODE END 3 */ section (this will preserve your code after regeneration).\t  For the LED toggling , use these functions: HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);\t\t  HAL_Delay (100);   /* Insert delay 100 ms */"},{img:{width:622,height:289,alt:"1",src:"img/pages/programming_Stm32/6.png",description:""}},{title:" Build the project",text:"To power the NUCLEO-L476RG, use its CN1 connector to connect in with a computer through a USB Type-A to Mini-B cable.\tClick on the project from the project explorer, then right click and select Build Project, to compile the project (or click on Build button on the toolbar)."},{title:"Debug the project",text:"Click on the Build toolbar icon Built Button.png, then on the Debug button Debug Button.png to build the project and start the debug session (or in the menu, select Project > Build Project then Run > Debug).\tClick on Resume icon Run Button.png to continue the execution.Now watch the green LED (LD2) toggling on the Nucleo-L476RG board"}]}]},E={id:2,sectionTitle:"Hardware",articles:[{articleTitle:"Module SPWF01SA",titleImg:{width:528,height:528,alt:"SPWF01SA11",src:"img/pages/spwf01sa11/introduction/SPWF01SA11.jpeg"},path:"spwf01sa11",articleComponents:[{title:"Introduction",text:"The SPWF01SA and the SPWF01SC intelligent Wi-Fi modules represent a plug-and-play\tand standalone 802.11 b/g/n solution for easy integration of wireless Internet connectivity\tfeatures into existing or new products.\tConfigured around a single-chip 802.11 transceiver with integrated PA and comprehensive\tpower management subsystem, and an STM32 microcontroller with an extensive GPIO\tsuite, the modules also incorporate timing clocks and voltage regulators. Two different options exist based on the integrated Flash memory. The SPWF01Sx.1y orderable parts  integrate 1.5 MB of Flash, while the SPWF01Sx.2y orderable parts integrate 512 KB of\tFlash. The module is available either configured with an embedded micro 2.45 GHz highly-efficient\tISM band antenna (SPWF01SA), or with an u.fl connector for external antenna connection\t(SPWF01SC).\tWith low power consumption and ultra-compact (2.7 x 1.5 cm) footprint, the modules are\tideal for fixed and mobile wireless applications, as well as challenging battery-operated\tapplications.\tThe SPWF01Sx parts are released with an integrated full featured TCP/IP protocol stack\twith added web server and additional application service capabilities, such as REST API for\taccessing files on servers in the cloud and support for dynamic web pages with CGI/SSI\tfunctions to easily interact with the module and the host processor over the air. For secure end-to-end communication with the cloud, an SSL/TLS stack is embedded in every module with no licensing charge. See application note AN4683 for details.\tThe SW package also includes an AT command layer interface for user-friendly access to\tthe stack functionalities via the UART serial port. For details, see user manual UM1695.\tIt is always possible to upgrade the module firmware via UART and Over The Air (FOTA).\tOut of the 1 MB extended Flash available on the SPWF01Sx.1y module, 512 KB of the\tFlash is dedicated to FW upgrade and the other 512 KB is dedicated to host proprietary\tfiles, organized in a file system image, accessible through the integrated web server.FOTA is also possible with the SPWF01Sx.2y module, temporarily storing the FW in theexternal host Flash memory, if it exists.ST may update the FW provided with the modules at any time. ST recommends that usersregularly check for documentation and the current FW version available atwww.st.com/wifimodules."},{img:{width:500,height:300,src:"img/pages/spwf01sa11/introduction/block-diagram.png",alt:"scheme",description:"Block diagram"}},{title:"Applications",list:["Smart appliances","Home automation and security systems.","Wireless sensors","Cable replacement","Medical equipment","Medical equipment","Production control and data collection"]},{title:"Features",list:["IEEE Standard 802.11 b/g/n 2.4 GHz","STM32 ARM Cortex-M3 controller with 64KB RAM and 512KB Flash","Integrated TCP/IP protocol stack","Web server that supports dynamic web pages","REST-like API for receiving and publishing web content","Securing WEP/WPA/WPA2 traffic","System modes: Station, IBSS and miniAP","Easy miniAP setup (SSID, PWD)","Quick connection to Wi-Fi after reset","Firmware update via UART and over the air (FOTA)","Transmitter signal level: 18.3 dBm @ 1 Mbps DSSS; 13.7 dBm @ 54 Mbps OFDM","Receiver sensitivity: -96.0 dBm @ 1 Mbps DSSS; -74.5 dBm @ 54 Mbps OFDM","16 configurable GPIO ports","Simple AT command set host interface over UART","Small form factor: 26.92 x 15.24 x 2.35 mm","Industrial temperature range: -40 \xb0C to 85 \xb0C","FCC/CE/IC/SRRC certified"]},{title:"General electrical specifications",img:{width:900,height:271,alt:"table1",src:"img/pages/spwf01sa11/introduction/table-max-raitings.png",description:"Absolute maximum ratings"}},{img:{width:900,height:700,alt:"table2",src:"img/pages/spwf01sa11/introduction/table-operating-condinionals.png",description:"Operating conditions and input power specifications"}},{title:"Digital interface specifications",img:{width:900,height:200,alt:"table3",src:"img/pages/spwf01sa11/introduction/table-digital-interface.png",description:"Digital interface specifications, I/O pins"}},{title:"RF characteristics",img:{width:900,height:1e3,alt:"table4",src:"img/pages/spwf01sa11/introduction/table-RF-characteristics.png",description:"RF characteristics"}},{title:"Pinout description",img:{width:620,height:1276,alt:"img/pages/spwf01sa11/introduction/",src:"img/pages/spwf01sa11/introduction/1.jpg",description:"Pinout description"}},{title:"Module reflow",img:{width:900,height:500,alt:"reflow",src:"img/pages/spwf01sa11/introduction/table-reflow.png",description:"Soldering values"}}]},{articleTitle:"X-NUCLEO-IDW01M1",titleImg:{width:287,height:223,alt:"f",src:"img/pages/X-NUCLEO-IDW01M1/1.png"},path:"X-NUCLEO-IDW01M1",articleComponents:[{subtitle:"Description",text:"The X-NUCLEO-IDW01M1 is a Wi-Fi evaluation and FCC certified SPWF01SA module has an expands the STM32 Nucleo boards. The CE, IC embedded STM32 MCU, a low-power Wi-Fi b/g/n board based on the SPWF01SA module, which SoC with integrated power amplifier and power management and an SMD antenna. The SPWF01SA module is also equipped with 1 MByte of external FLASH for firmware update over-the-air (FOTA). The firmware features a complete software IP stack to open up to 8 TCP/UDP sockets, as well as dynamic web pages with SSI to interact with the module and a REST API (get & post) for conveniently transferring files to/from servers in the cloud. The module can simultaneously behave as a socket server and socket client. The firmware supports secure sockets with TLS/SSL encryption, ensuring secure end-to-end communications with the cloud, with or without authentication. The module operates as a client STA, IBSS, or miniAP (with up to 5 client STAs). The XNUCLEO-IDW01M1 interfaces with the MCU on the STM32 Nucleo board via the UART serial port; the user can easily access the stack functions using the AT command. X-NUCLEOIDW01M1 is compatible with both the ST morpho and Arduino UNO R3 connector layout.\t"},{subtitle:"Features ",list:["X-NUCLEO-IDW01M1 hosts FCC, IC and CE certified SPWF01SA module (FCC ID: VRA-SG9011203, IC: 7420A-SG9011203 and ETSI compliant) ","SPWF01 module","compatible with STM32 Nucleo boards","equipped both with ST morpho connector  and Arduino UNO R3 connectors\t  ","scalable solution; it can cascade multiple  boards for larger systems\t  ","free development firmware library and\texamples, compatible with STM32Cube","RoHS compliant"]},{title:"Hardware Schematics",subtitle:"STM32 Nucleo connectors"},{img:{width:559,height:553,alt:"2",src:"img/pages/X-NUCLEO-IDW01M1/2.png",description:"STM32 Nucleo connectors"}},{subtitle:"STM32 Nucleo connections",text:"The X-NUCLEO-IDW01M1 expansion board is designed to be plugged directly on the STM32 Nucleo board connectors. The X-NUCLEO-IDW01M1 is configured by default to be compatible with the highest number of STM32 Nucleo boards possible. It may be also be configured, via resistor placement, to use different I/O configurations in order to match specific customer targets. Refer to the X-NUCLEO-IDW01M1 user manual for more detailed information regarding the possible I/O configuration options. Check to see if resistor R21 is present; if it is, please remove it as it may interfere with JTAG debug.s"},{subtitle:"Schematic diagram",img:{width:620,height:877,alt:"2",src:"img/pages/X-NUCLEO-IDW01M1/2.jpg",description:"X-NUCLEO-IDW01M1 board schematic"}}]},{articleTitle:"NUCLEO-STM32F401RE",titleImg:{width:317,height:265,alt:"f",src:"img/pages/STM32F401RE/1.png"},path:"STM32F401RE",articleComponents:[{title:"Introduction",text:"The STM32 Nucleo board provides an affordable and flexible way for users to try out new ideas and build prototypes with any STM32 microcontroller line, choosing from the various combinations of performance, power consumption and features. The Arduino\u2122 connectivity support and ST Morpho headers make it easy to expand the functionality of the STM32 Nucleo open development platform with a wide choice of specialized shields. The STM32 Nucleo board does not require any separate probe as it integrates the ST-LINK/V2-1 debugger/programmer. The STM32 Nucleo board comes with the STM32 comprehensive software HAL library together with various packaged software examples, as well as direct access to mbed online resources."},{subtitle:"Features",list:["STM32 microcontroller with LQFP64 package ","Two types of extension resources","mbed-enabled (mbed.org)","On-board ST-LINK/V2-1\tdebugger/programmer with SWD connector","Flexible board power supply","Three LEDs: USB communication (LD1), user LED  (LD2), power LED (LD3) ","Two push buttons: USER and RESET","USB re-enumeration capability: three different\tinterfaces supported on USB","Comprehensive free software HAL library including a variety of software examples","Supported by wide choice of Integrated  Development Environments (IDEs) including\t  IAR, Keil, GCC-based IDEs"]}]}]},W=[L,E,{id:3,gigatitle:"SPWF01SA11 MODULE",sectionTitle:"Getting started with module spwf01sa11",articles:[{articleTitle:"Getting started with the SPWF01SA module",titleImg:{width:971,height:429,alt:"boards",src:"img/pages/first_setup/mainImg.png"},path:"first_setup",articleComponents:[{title:"Hardware",list:["NUCLEO-F401RE, NUCLEO-F103RB, NUCLEO-L053R8  or NUCLEOL476RG","X-NUCLEO-IDW01M1, expansion board based on SWPF01SA module for STM32 Nucleo"]},{title:"Software",list:["X-CUBE-WIFI1 Software package","TeraTerm or other terminal emulator","Text editor","Web browser"]},{title:"Connection and firmware",subtitle:"Step 1",text:"The first step is to connect the X-NUCLEO-IDW01M1 expansion board to the NUCLEO-F401RE evaluation board or similar (the list of compatible boards is written in the hardware), the connection is made via the St morpho connector."},{img:{width:900,height:400,alt:"STmorpho",src:"img/pages/first_setup/STmorpho.png",description:" St morpho connectors"}},{img:{width:631,height:372,alt:"ustanovka",src:"img/pages/first_setup/ustanovka.png",description:" X-NUCLEO-IDW01M1 with NUCLEO-F401RE"}},{subtitle:"Step 2",text:"Then you need to connect the evaluation board to the PC with a mini USB to USB cable, then the PC will detect it immediately."},{img:{width:700,height:400,alt:"nucleoDetected",src:"img/pages/first_setup/nucleoDetected.png",description:"\u0420\u0438\u0441. 3  \u041f\u041a \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0443\u044e \u043f\u043b\u0430\u0442\u0443"}},{subtitle:"Step 3",text:"Go to the official website of STM32 st.com and enter X-CUBE-WIFI1 into the search box, follow the first link, scroll to Tools&Software, and download X-CUBE-WIFI1. After downloading the archive, unzip it to any convenient place. Go to the STM32F401RE folder and drag Project.bin to the evaluation board, the flash memory will be flashed and the module will be ready to go! "},{img:{width:900,height:400,alt:"firmware",src:"img/pages/first_setup/firmware.png ",description:" Firmware"}},{subtitle:"Step 4",text:"Download TeraTerm or another terminal emulator, then run it and select the COM port to which the evaluation board is connected. Go to Setup -> Terminal, select CR+LF in the Receive and Transmit field, check the box opposite Local echo Go to Setup -> Serial Port, Baud rate should be 115200 and transmit delay 1msec."},{img:{width:560,height:360,alt:"terminalSetup",src:"img/pages/first_setup/terminalSetup.png",description:"  Terminal setup"}},{img:{width:490,height:360,alt:"SerialPortSetup",src:"img/pages/first_setup/SerialPortSetup.png",description:"Serial port setup"}},{subtitle:"Step 5",text:"Now we can communicate with the module using AT commands. Let's write the AT command in the terminal - this is the default command, it should return OK. The full list of AT commands is given in table 1. The commands will be familiarized in the next article."},{img:{width:283,height:143,alt:"Tera Term output",src:"img/pages/first_setup/output.png",description:"Tera Term output"}},{img:{width:500,height:700,alt:"table",src:"img/pages/first_setup/table.png",description:"AT commands "}}]},f,b,w,x,y,M,v,A,C,P,_,F,I,k,O]}],j=[{headline:"MAIN",src:"img/main-menu/library.jpg",link:"/"},{headline:"LIBRARY",src:"img/main-menu/library.jpg",link:"/library"},{headline:"FIRST SETUP",src:"img/main-menu/first_setup.jpg",link:"/library/first_setup"},{headline:"TESTS",src:"img/main-menu/tests.jpg",link:"/tests"}],R=[L,E,{id:3,gigatitle:"SPWF01SA11 MODULE",sectionTitle:"Getting started with module spwf01sa11",articles:[{articleTitle:"\u041f\u041e\u0427\u0410\u0422\u041e\u041a \u0420\u041e\u0411\u041e\u0422\u0418 \u0417 \u041c\u041e\u0414\u0423\u041b\u0415\u041c SPWF01SA",titleImg:{width:971,height:429,alt:"boards",src:"img/pages/first_setup/mainImg.png"},path:"first_setup",articleComponents:[{title:"\u0410\u043f\u0430\u0440\u0430\u0442\u043d\u0435 \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0435\u043d\u043d\u044f",list:["UCLEO-F401RE, NUCLEO-F103RB, NUCLEO-L053R8 \u0430\u0431\u043e NUCLEOL476RG","X-NUCLEO-IDW01M1, \u043a\u0430\u0440\u0442\u0430 \u0440\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u043d\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u043c\u043e\u0434\u0443\u043b\u044f SWPF01SA \u0434\u043b\u044f STM32 Nucleo"]},{title:"\u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041d\u0415 \u0417\u0410\u0411\u0415\u0417\u041f\u0415\u0427\u0415\u041d\u041d\u042f",list:["\u041f\u0430\u043a\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c X-CUBE-WIFI1","TeraTerm \u0430\u0431\u043e \u0456\u043d\u0448\u0438\u0439 \u0435\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u0442\u0435\u0440\u043c\u0456\u043d\u0430\u043b\u0443","\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u0438\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440r","Web browser"]},{title:"Connection and firmware",subtitle:"Step 1",text:"The first step is to connect the X-NUCLEO-IDW01M1 \u043a\u0430\u0440\u0442\u0443 \u0440\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u043d\u044f to the NUCLEO-F401RE \u043c\u043e\u043d\u0442\u0430\u0436\u043d\u043e\u0457 \u043f\u043b\u0430\u0442\u0438 or similar , the connection is made via the St morpho connector."},{img:{width:900,height:400,alt:"STmorpho",src:"img/pages/first_setup/STmorpho.png",description:" St morpho connectors"}},{img:{width:631,height:372,alt:"ustanovka",src:"img/pages/first_setup/ustanovka.png",description:" X-NUCLEO-IDW01M1 with NUCLEO-F401RE"}},{subtitle:"Step 2",text:"Then you need to connect the \u043c\u043e\u043d\u0442\u0430\u0436\u043d\u0443 \u043f\u043b\u0430\u0442\u0443 to the PC with a mini USB to USB cable, then the PC will detect it immediately."},{img:{width:700,height:400,alt:"nucleoDetected",src:"img/pages/first_setup/nucleoDetected.png",description:"\u0420\u0438\u0441. 3  \u041f\u041a \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0443\u044e \u043f\u043b\u0430\u0442\u0443"}},{subtitle:"Step 3",text:"Go to the official website of STM32 st.com and enter X-CUBE-WIFI1 into the search box, follow the first link, scroll to Tools&Software, and download X-CUBE-WIFI1. After downloading the archive, unzip it to any convenient place. Go to the STM32F401RE folder and drag Project.bin to the \u043c\u043e\u043d\u0442\u0430\u0436\u043d\u043e\u0457 \u043f\u043b\u0430\u0442\u0438, the flash memory will be flashed and the module will be ready to go! "},{img:{width:900,height:400,alt:"firmware",src:"img/pages/first_setup/firmware.png ",description:" Firmware"}},{subtitle:"Step 4",text:"Download TeraTerm or another terminal emulator, then run it and select the COM port to which the \u043c\u043e\u043d\u0442\u0430\u0436\u043d\u0430 \u043f\u043b\u0430\u0442\u0430 is connected. Go to Setup -> Terminal, select CR+LF in the Receive and Transmit field, check the box opposite Local echo Go to Setup -> Serial Port, Baud rate should be 115200 and transmit delay 1msec."},{img:{width:560,height:360,alt:"terminalSetup",src:"img/pages/first_setup/terminalSetup.png",description:"  Terminal setup"}},{img:{width:490,height:360,alt:"SerialPortSetup",src:"img/pages/first_setup/SerialPortSetup.png",description:"Serial port setup"}},{subtitle:"Step 5",text:"Now we can communicate with the module using AT commands. Let's write the AT command in the terminal - this is the default command, it should return OK. The full list of AT commands is given in table 1. The commands will be familiarized in the next article."},{img:{width:283,height:143,alt:"Tera Term output",src:"img/pages/first_setup/output.png",description:"Tera Term output"}},{img:{width:500,height:700,alt:"table",src:"img/pages/first_setup/table.png",description:"AT commands "}}]},f,b,w,x,y,M,v,A,C,P,_,F,I,k,O]}],D=[{question:"Chose the high perfomance MCU's",answers:[{answer:"L5 serie",bool:!1},{answer:"F7 serie",bool:!0},{answer:"L0 serie",bool:!1},{answer:"WB serie",bool:!1}],name:"1"},{question:"Chose the low power MCU's",answers:[{answer:"WL serie",bool:!1},{answer:"F7 serie",bool:!1},{answer:"L1 serie",bool:!0},{answer:"G0 serie",bool:!1}],name:"2"}],N=function(e){var t=e.tests;return Object(c.jsxs)("div",{className:"library",children:[Object(c.jsx)("h2",{children:"Tests"}),Object(c.jsx)("div",{className:"library__main",children:t.map((function(e){return Object(c.jsxs)(c.Fragment,{children:[Object(c.jsx)("h5",{className:"question",children:e.question}),e.answers.map((function(t,i){return Object(c.jsx)("button",{onClick:function(t){!function(e,t){t.answers[e.target.id]&&(!0===t.answers[e.target.id].bool?e.target.classList.add("answer_true"):e.target.classList.add("answer_false"),console.log())}(t,e)},id:String(i),className:"answer",children:t.answer})}))]})}))})]})},U=Object(a.createContext)({});var B=function(){return Object(c.jsx)(U.Provider,{value:{library:W,menuItems:j},children:Object(c.jsx)("div",{className:"App",children:Object(c.jsxs)("div",{className:"wrapper",children:[Object(c.jsx)(p,{menuItems:j}),Object(c.jsxs)(m.c,{children:[Object(c.jsx)(m.a,{path:"/",exact:!0,children:Object(c.jsx)(d,{menuItems:j})}),Object(c.jsx)(m.a,{exact:!0,path:"/library",children:Object(c.jsx)(g,{})}),Object(c.jsx)(m.a,{exact:!0,path:"/library/:path",children:Object(c.jsx)(S,{library:"ua"===localStorage.getItem("lang")?R:W})}),Object(c.jsx)(m.a,{exact:!0,path:"/tests",children:Object(c.jsx)(N,{tests:D})}),Object(c.jsx)(m.a,{exact:!0,path:"/map",children:Object(c.jsx)(T,{})})]})]})})})};n.a.render(Object(c.jsx)(s.a.StrictMode,{children:Object(c.jsx)(l.a,{children:Object(c.jsx)(B,{})})}),document.getElementById("root"))}},[[30,1,2]]]);
//# sourceMappingURL=main.d6efb6eb.chunk.js.map